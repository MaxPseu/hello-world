#somename
_ underscore
= equal
() parenthesis
[] square bracket
, comma
^ caret
" double-quote
' quote
# hash  octothorpe  pound   mesh
+ plus 
- minus 
/ slash 
\ back-slash
\\ double back-slash
* asterisk 
% percent 
< less-than 
> greater-than 
<= less-than-equal 
>= greater-than-equal 
.  dot, period
:  colon
and 
or 
not
!=  not equal
==
>=
<=
True
False
ordinal number  #start with 1
cardinal number #start with 0


#os
mkdir   #create a dir
rmdir   #del a dir
pydoc function
open()    #open a file argument is the filename
#https://freepythontips.wordpress.com/2014/01/15/the-open-function-explained/
"""
The first argument of open is the filename. 
The second one (the *mode*) determines *how* the file gets opened.

 ``r''   Open text file for reading.  The stream is positioned at the
         beginning of the file.

 ``r+''  Open for reading and writing.  The stream is positioned at the
         beginning of the file.

 ``w''   Truncate file to zero length or create text file for writing.
         The stream is positioned at the beginning of the file.

 ``w+''  Open for reading and writing.  The file is created if it does not
         exist, otherwise it is truncated.  The stream is positioned at
         the beginning of the file.

 ``a''   Open for writing.  The file is created if it does not exist.  The
         stream is positioned at the end of the file.  Subsequent writes
         to the file will always end up at the then current end of file,
         irrespective of any intervening fseek(3) or similar.

 ``a+''  Open for reading and writing.  The file is created if it does not
         exist.  The stream is positioned at the end of the file.  Subse-
         quent writes to the file will always end up at the then current
         end of file, irrespective of any intervening fseek(3) or similar.

b=binary
t=txt
open(filename,rb)
open(filename,rt #default mode)

"""
file.closed	#Returns true if file is closed, false otherwise.
file.mode	#Returns access mode with which file was opened.
file.name	#Returns name of the file.
file.softspace	#Returns false if space explicitly required with print, true otherwise.

fileObject.
read()    #read the opened file,no argument
close()   #close the opened file,no argument
readline()    #read a line of the file
truncate()    #clear the file,no argument
write(stuff)  #stuff is string
seek(offset[, whence])#offset -- This is the position of the read/write pointer within the file.
#whence -- This is optional and defaults to 0 which means absolute file positioning, other values are 1 which means seek relative to the current position and 2 means seek relative to the file's end.

cat #print the file
file
os
sys


#python modules

from sys import argv    #import sys modules
script, first, second, third = argv #argument variable not a string type
#You cannot "use raw_input() with argv". 
#argv is supplied with data that you specify before running the program. 
#raw_input() is a Python function, i.e. something that your program can do. 
#The command line - where you type the python command in order to run your program - is a completely #separate thing from the program itself.

from os.path import exists
#exists(argv)  argv is a filename,if file exists,return True,else return False.
from sys import exit    #exit()

#python tips
print ""
print ''
%r %d %s    format string
print """   

"""
print '''   

'''
print "It's nice",'ok'
print 'I said:"good".'
a = 'aaaaaaaaaaaaa'
b = raw_input(a) #return a string
#The raw_input([prompt]) function reads one line from standard input and returns it as a string (removing the trailing newline).
c = "\n\t\\"
d = eval()  #value
print a,b,c*10

def #define a function
def name(*args):    #
""" documentation comments"""
a = name(argv)  #name function has return in the end

import ex25.py  #import your own module,ex25.py are defined functions
ex25.sort_word  #when using the function from your module,it should be modulename.function
list    #a list
list1 = ['physics', 'chemistry', 1997, 2000];
print list1[0],list1[1,5]
'''
len([1, 2, 3])	                3	                            Length
[1, 2, 3] + [4, 5, 6]	        [1, 2, 3, 4, 5, 6]	            Concatenation
['Hi!'] * 4	                    ['Hi!', 'Hi!', 'Hi!', 'Hi!']	Repetition
3 in [1, 2, 3]	                True	                        Membership
for x in [1, 2, 3]: print x,	1 2 3	                        Iteration
'''
Built-in List Functions & Methods:
function:
cmp(list1,list2)    #less = -1,tie = 0,larger = 1
len(list1)  #lenght,list1[0]~list1[len(list1)-1]
max(list1)  #max value  numbers are "smallest").
min(list1)  #min value
list(seq)   #seq is a tuple(123,"xyz",333) 
#element values of a tuple can not be changed and tuple elements are put between parentheses instead of square bracket.

method:
list.append(obj)    #list1.append(100)This method does not return any value but updates existing list.
list.count(obj)     #This method returns count of how many times obj occurs in list.
list.extend(seq)    #seq is a list,append a list
list.index(obj)     #return the index,otherwise raise an exception
list.insert(index,obj)  #aList = [123, 'xyz', 'zara', 'abc'] aList.insert( 3, 2009) [123, 'xyz', 'zara', 2009, 'abc']
list.pop(obj=list[-1])  #obj -- This is an optional parameter, index of the object to be removed from the list.
list.remove(obj)    #remove the first obj
list.reverse()      #reverse,back to front
list.sort([func])   #The method sort() sorts objects of list, use compare func if given.default up

String split() Method
str.split(str="", num=string.count(str)) #This method returns a list of lines.

if True:
    a
elif:
    b
else:
    c
list1 = ['gyh',123,'cd',234]    #create a list
for a in list1:     #for iterating_var in sequence:
    do something    #statements(s)

'''
for num in range(10,20):  #to iterate between 10 to 20
   for i in range(2,num): #to iterate on the factors of the number
      if num%i == 0:      #to determine the first factor
         j=num/i          #to calculate the second factor
         print '%d equals %d * %d' % (num,i,j)
         break #to move to the next number, the #first FOR
   else:                  # else part of the loop
      print num, 'is a prime number'
'''
#The break statement, like in C, breaks out of the smallest enclosing for or while loop.
'''
Loop statements may have an else clause; it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement.
'''
#The continue statement, also borrowed from C, continues with the next iteration of the loop
#The pass statement does nothing. It can be used when a statement is required syntactically but the program requires no action.
'''
class MyEmptyClass:
    pass
'''




